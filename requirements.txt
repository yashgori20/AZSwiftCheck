gunicorn>=21.2.0
flask>=3.0.0
azure-cosmos>=4.5.1
azure-identity>=1.15.0
azure-keyvault-secrets>=4.7.0
azure-search-documents>=11.4.0
azure-storage-blob>=12.19.0
azure-ai-formrecognizer>=3.3.0
azure-core>=1.29.5
openai>=1.3.0
sentence-transformers>=2.7.0
redis>=5.0.1
gptcache>=0.1.43
PyMuPDF>=1.23.0
pytesseract>=0.3.10
pillow>=10.0.0
pdf2image>=1.16.3
python-dotenv>=1.0.1
requests>=2.31.0
opencensus-ext-azure>=1.1.0
azure-eventgrid
reportlab>=4.0.0


# Write-Host "🚀 SWIFT CHECK AI - COMPREHENSIVE PRODUCTION TEST SUITE" -ForegroundColor Green
# >> Write-Host "================================================================" -ForegroundColor Green
# >> 
# >> $baseUrl = "https://swiftcheck-api.agreeabletree-bb0198f9.uaenorth.azurecontainerapps.io"
# >> $testResults = @{}
# >> 
# >> # Test 1: Basic Health & Info
# >> Write-Host "`n🏥 TEST 1: BASIC HEALTH & SYSTEM INFO" -ForegroundColor Yellow
# >> try {
# >>     $health = Invoke-RestMethod -Uri "$baseUrl/health" -Method GET
# >>     $info = Invoke-RestMethod -Uri "$baseUrl/info" -Method GET
# >>     
# >>     Write-Host "   ✅ Health Status: $($health.status)"
# >>     Write-Host "   ✅ Services: Cosmos($($health.services.cosmos_db)), Redis($($health.services.redis_cache)), KeyVault($($health.services.key_vault))"
# >>     Write-Host "   ✅ Version: $($info.version) | Environment: $($info.environment)"
# >>     Write-Host "   ✅ Azure Services: $($info.azure_services.Count) enabled"
# >>     $testResults.BasicHealth = "✅ PASS"
# >> } catch {
# >>     Write-Host "   ❌ Basic health check failed: $($_.Exception.Message)" -ForegroundColor Red
# >>     $testResults.BasicHealth = "❌ FAIL"
# >> }
# >>
# >> # Test 2: AI-Powered QC Template Generation
# >> Write-Host "`n🤖 TEST 2: AI-POWERED QC TEMPLATE GENERATION" -ForegroundColor Yellow
# >> try {
# >>     $templateData = @{
# >>         doc_type = "Production Quality Inspection Checklist"
# >>         product_name = "Al Kabeer Premium Chicken Samosa"
# >>         supplier_name = "Al Kabeer Food Industries"
# >>     } | ConvertTo-Json
# >>
# >>     $start = Get-Date
# >>     $template = Invoke-RestMethod -Uri "$baseUrl/refine" -Method POST -Body $templateData -ContentType "application/json"
# >>     $duration = (Get-Date) - $start
# >>
# >>     Write-Host "   ✅ Template Generated: $($template.parameters_count) parameters"
# >>     Write-Host "   ✅ Response Time: $($duration.TotalMilliseconds) ms"
# >>     Write-Host "   ✅ Regulatory Compliance: $($template.enhancements.regulatory_compliance)"
# >>     Write-Host "   ✅ Intelligent Types: $($template.enhancements.intelligent_types)"
# >>     Write-Host "   ✅ Request ID: $($template.request_id)"
# >>
# >>     $global:testRequestId = $template.request_id
# >>     $testResults.QCGeneration = "✅ PASS ($($template.parameters_count) params)"
# >> } catch {
# >>     Write-Host "   ❌ QC generation failed: $($_.Exception.Message)" -ForegroundColor Red
# >>     $testResults.QCGeneration = "❌ FAIL"
# >> }
# >>
# >> # Test 3: Multi-Tenant Support
# >> Write-Host "`n🏢 TEST 3: MULTI-TENANT SUPPORT" -ForegroundColor Yellow
# >> try {
# >>     $tenantData = @{
# >>         company_name = "Production Test Corporation $(Get-Random -Maximum 999)"
# >>         contact_email = "production.test@testcorp.com"
# >>         subscription_plan = "enterprise"
# >>     } | ConvertTo-Json
# >>
# >>     $tenant = Invoke-RestMethod -Uri "$baseUrl/tenant/create" -Method POST -Body $tenantData -ContentType "application/json"
# >>
# >>     Write-Host "   ✅ Tenant Created: $($tenant.tenant_id)"
# >>     Write-Host "   ✅ Multi-tenant isolation working"
# >>
# >>     $global:testTenantId = $tenant.tenant_id
# >>     $testResults.MultiTenant = "✅ PASS"
# >> } catch {
# >>     Write-Host "   ❌ Multi-tenant creation failed: $($_.Exception.Message)" -ForegroundColor Red
# >>     $testResults.MultiTenant = "❌ FAIL"
# >> }
# >>
# >> # Test 4: Workflow Automation
# >> Write-Host "`n🔄 TEST 4: WORKFLOW AUTOMATION" -ForegroundColor Yellow
# >> try {
# >>     $workflowData = @{
# >>         request_id = $global:testRequestId
# >>         template_data = @{
# >>             parameters_count = 25
# >>             summary = "Automated workflow test"
# >>         }
# >>         tenant_id = $global:testTenantId
# >>     } | ConvertTo-Json -Depth 3
# >>
# >>     $workflow = Invoke-RestMethod -Uri "$baseUrl/workflow/create" -Method POST -Body $workflowData -ContentType "application/json"
# >>
# >>     # Test approval submission
# >>     $approvalData = @{
# >>         workflow_id = $workflow.workflow_id
# >>         approver_id = "test_supervisor_001"
# >>         approver_role = "QC Supervisor"
# >>         decision = "approved"
# >>         comments = "Automated test approval - template meets standards"
# >>     } | ConvertTo-Json
# >>
# >>     $approval = Invoke-RestMethod -Uri "$baseUrl/workflow/approve" -Method POST -Body $approvalData -ContentType "application/json"
# >>
# >>     Write-Host "   ✅ Workflow Created: $($workflow.workflow_id)"
# >>     Write-Host "   ✅ Approval Submitted: $($approval.workflow.status)"
# >>     Write-Host "   ✅ Approval automation working"
# >>
# >>     $testResults.WorkflowAutomation = "✅ PASS"
# >> } catch {
# >>     Write-Host "   ❌ Workflow automation failed: $($_.Exception.Message)" -ForegroundColor Red
# >>     $testResults.WorkflowAutomation = "❌ FAIL"
# >> }
# >>
# >> # Test 5: Event-Driven Processing
# >> Write-Host "`n📤 TEST 5: EVENT-DRIVEN PROCESSING" -ForegroundColor Yellow
# >> try {
# >>     # Create a test file
# >>     "Test QC document content for event processing" | Out-File -FilePath "test-event-doc.txt"
# >>
# >>     $form = @{
# >>         file = Get-Item "test-event-doc.txt"
# >>         doc_type = "Event Test Checklist"
# >>         product_name = "Event Processing Test Product"
# >>         supplier_name = "Test Supplier"
# >>     }
# >>
# >>     $upload = Invoke-RestMethod -Uri "$baseUrl/upload/async" -Method POST -Form $form
# >>
# >>     # Check status
# >>     Start-Sleep -Seconds 2
# >>     $status = Invoke-RestMethod -Uri "$baseUrl/upload/status/$($upload.request_id)" -Method GET
# >>
# >>     Write-Host "   ✅ Async Upload: $($upload.request_id)"
# >>     Write-Host "   ✅ Processing Status: $($status.status)"
# >>     Write-Host "   ✅ Event-driven architecture working"
# >>
# >>     # Cleanup
# >>     Remove-Item "test-event-doc.txt" -ErrorAction SilentlyContinue
# >>
# >>     $testResults.EventDriven = "✅ PASS"
# >> } catch {
# >>     Write-Host "   ❌ Event processing failed: $($_.Exception.Message)" -ForegroundColor Red
# >>     $testResults.EventDriven = "❌ FAIL"
# >> }
# >>
# >> # Test 6: Analytics Dashboard
# >> Write-Host "`n📊 TEST 6: ADVANCED ANALYTICS" -ForegroundColor Yellow
# >> try {
# >>     $analytics = Invoke-RestMethod -Uri "$baseUrl/analytics/dashboard?tenant_id=$($global:testTenantId)" -Method GET
# >>     $tenantAnalytics = Invoke-RestMethod -Uri "$baseUrl/tenant/$($global:testTenantId)/analytics?days=1" -Method GET
# >>
# >>     Write-Host "   ✅ Dashboard Data: $($analytics.dashboard.total_events) events"
# >>     Write-Host "   ✅ Templates Created: $($analytics.dashboard.templates_created)"
# >>     Write-Host "   ✅ Tenant Analytics: Available"
# >>     Write-Host "   ✅ Performance Metrics: $($analytics.performance.total_requests) requests"
# >>
# >>     $testResults.Analytics = "✅ PASS"
# >> } catch {
# >>     Write-Host "   ❌ Analytics failed: $($_.Exception.Message)" -ForegroundColor Red
# >>     $testResults.Analytics = "❌ FAIL"
# >> }
# >>
# >> # Test 7: Caching Performance
# >> Write-Host "`n⚡ TEST 7: CACHING PERFORMANCE" -ForegroundColor Yellow
# >> try {
# >>     # First call (cache miss)
# >>     $start1 = Get-Date
# >>     $result1 = Invoke-RestMethod -Uri "$baseUrl/refine" -Method POST -Body $templateData -ContentType "application/json"
# >>     $time1 = (Get-Date) - $start1
# >>
# >>     Start-Sleep -Seconds 1
# >>
# >>     # Second identical call (should be cached)
# >>     $start2 = Get-Date
# >>     $result2 = Invoke-RestMethod -Uri "$baseUrl/refine" -Method POST -Body $templateData -ContentType "application/json"
# >>     $time2 = (Get-Date) - $start2
# >>
# >>     $cacheStats = Invoke-RestMethod -Uri "$baseUrl/cache/stats" -Method GET
# >>
# >>     Write-Host "   ✅ First Call: $($time1.TotalMilliseconds) ms"
# >>     Write-Host "   ✅ Second Call: $($time2.TotalMilliseconds) ms"
# >>     Write-Host "   ✅ Performance Improvement: $(($time1.TotalMilliseconds - $time2.TotalMilliseconds).ToString('F0')) ms faster"
# >>     Write-Host "   ✅ Cache Stats: $($cacheStats.cache_stats.total_entries) entries"
# >>
# >>     $testResults.Caching = "✅ PASS"
# >> } catch {
# >>     Write-Host "   ❌ Caching test failed: $($_.Exception.Message)" -ForegroundColor Red
# >>     $testResults.Caching = "❌ FAIL"
# >> }
# >>
# >> # Test 8: Template Export
# >> Write-Host "`n📄 TEST 8: TEMPLATE EXPORT" -ForegroundColor Yellow
# >> try {
# >>     $templateJson = Invoke-RestMethod -Uri "$baseUrl/template/$($global:testRequestId)" -Method GET
# >>
# >>     Write-Host "   ✅ JSON Template: $(($templateJson | ConvertTo-Json).Length) characters"
# >>     Write-Host "   ✅ Tools Count: $($templateJson.pageToolsDataList.Count) tools"
# >>     Write-Host "   ✅ Template ID: $($templateJson.templateId)"
# >>     Write-Host "   ✅ Flutter-compatible format: Valid"
# >>
# >>     $testResults.TemplateExport = "✅ PASS"
# >> } catch {
# >>     Write-Host "   ❌ Template export failed: $($_.Exception.Message)" -ForegroundColor Red
# >>     $testResults.TemplateExport = "❌ FAIL"
# >> }
# >>
# >> # Test 9: Request History
# >> Write-Host "`n📋 TEST 9: REQUEST HISTORY" -ForegroundColor Yellow
# >> try {
# >>     $history = Invoke-RestMethod -Uri "$baseUrl/history?format=json" -Method GET
# >>
# >>     Write-Host "   ✅ History Records: $($history.Count) requests"
# >>     Write-Host "   ✅ Latest Request: $($history[0].id)"
# >>     Write-Host "   ✅ Data persistence working"
# >>
# >>     $testResults.RequestHistory = "✅ PASS"
# >> } catch {
# >>     Write-Host "   ❌ Request history failed: $($_.Exception.Message)" -ForegroundColor Red
# >>     $testResults.RequestHistory = "❌ FAIL"
# >> }
# >>
# >> # Test Results Summary
# >> Write-Host "`n"
# >> Write-Host "================================================================" -ForegroundColor Green
# >> Write-Host "🎯 COMPREHENSIVE TEST RESULTS SUMMARY" -ForegroundColor Green
# >> Write-Host "================================================================" -ForegroundColor Green
# >>
# >> $passCount = ($testResults.Values | Where-Object { $_ -like "*✅*" }).Count
# >> $totalTests = $testResults.Count
# >>
# >> Write-Host "`n📊 OVERALL SCORE: $passCount/$totalTests TESTS PASSED" -ForegroundColor $(if($passCount -eq $totalTests) { "Green" } else { "Yellow" })
# >>
# >> foreach ($test in $testResults.GetEnumerator()) {
# >>     $color = if ($test.Value -like "*✅*") { "Green" } else { "Red" }
# >>     Write-Host "   $($test.Key): $($test.Value)" -ForegroundColor $color
# >> }
# >>
# >> Write-Host "`n🌟 PRODUCTION SYSTEM STATUS:" -ForegroundColor Green
# >> if ($passCount -eq $totalTests) {
# >>     Write-Host "   🎉 ALL SYSTEMS OPERATIONAL - READY FOR PRODUCTION USE!" -ForegroundColor Green
# >> } elseif ($passCount -ge ($totalTests * 0.8)) {
# >>     Write-Host "   ⚠️  MOSTLY OPERATIONAL - MINOR ISSUES TO ADDRESS" -ForegroundColor Yellow
# >> } else {
# >>     Write-Host "   ❌ SIGNIFICANT ISSUES DETECTED - REQUIRES ATTENTION" -ForegroundColor Red
# >> }
# >>
# >> Write-Host "`n🔗 PRODUCTION URL: $baseUrl" -ForegroundColor Cyan
# >> Write-Host "================================================================" -ForegroundColor Green