from reportlab.lib.pagesizes import letter, A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, Image
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from datetime import datetime
import io
import base64
from azure.storage.blob import BlobServiceClient
from azure_secrets import get_blob_connection

class PDFReportGenerator:
    def __init__(self):
        self.styles = getSampleStyleSheet()
        self.blob_client = BlobServiceClient.from_connection_string(get_blob_connection())
        
        # Custom styles
        self.title_style = ParagraphStyle(
            'CustomTitle',
            parent=self.styles['Heading1'],
            fontSize=18,
            spaceAfter=30,
            textColor=colors.darkblue,
            alignment=1  # Center
        )
        
        self.heading_style = ParagraphStyle(
            'CustomHeading',
            parent=self.styles['Heading2'],
            fontSize=14,
            spaceAfter=12,
            textColor=colors.darkgreen
        )
    
    def generate_qc_template_report(self, request_id, template_data, parameters):
        """Generate PDF report for QC template"""
        buffer = io.BytesIO()
        
        # Create PDF document
        doc = SimpleDocTemplate(buffer, pagesize=A4, rightMargin=72, leftMargin=72, topMargin=72, bottomMargin=18)
        
        # Content
        story = []
        
        # Title
        title = f"QC Template Report - {template_data.get('product_name', 'Unknown Product')}"
        story.append(Paragraph(title, self.title_style))
        story.append(Spacer(1, 12))
        
        # Template Info
        info_data = [
            ['Product Name:', template_data.get('product_name', 'N/A')],
            ['Supplier:', template_data.get('supplier_name', 'N/A')],
            ['Document Type:', template_data.get('doc_type', 'N/A')],
            ['Generated Date:', datetime.now().strftime('%Y-%m-%d %H:%M:%S')],
            ['Request ID:', request_id],
            ['Total Parameters:', str(len(parameters))]
        ]
        
        info_table = Table(info_data, colWidths=[2*inch, 4*inch])
        info_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (0, -1), colors.lightgrey),
            ('TEXTCOLOR', (0, 0), (-1, -1), colors.black),
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
            ('BACKGROUND', (1, 0), (1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(info_table)
        story.append(Spacer(1, 20))
        
        # Parameters Section
        story.append(Paragraph("Quality Control Parameters", self.heading_style))
        
        # Group parameters by section
        sections = {}
        for param in parameters:
            section = param.get('section', 'General')
            if section not in sections:
                sections[section] = []
            sections[section].append(param)
        
        for section_name, section_params in sections.items():
            story.append(Paragraph(f"Section: {section_name}", self.heading_style))
            
            # Parameters table
            param_data = [['Parameter', 'Type', 'Specification', 'Compliance']]
            
            for param in section_params:
                param_data.append([
                    param.get('parameter_name', 'N/A'),
                    param.get('type', 'N/A'),
                    param.get('spec', 'N/A')[:50] + ('...' if len(param.get('spec', '')) > 50 else ''),
                    param.get('clause_reference', 'N/A')
                ])
            
            param_table = Table(param_data, colWidths=[2.5*inch, 1*inch, 2*inch, 1.5*inch])
            param_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), colors.darkblue),
                ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
                ('FONTSIZE', (0, 0), (-1, -1), 8),
                ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
                ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                ('GRID', (0, 0), (-1, -1), 1, colors.black)
            ]))
            
            story.append(param_table)
            story.append(Spacer(1, 12))
        
        # Footer
        story.append(Spacer(1, 20))
        footer_text = "Generated by Swift Check AI - Automated Quality Control System"
        story.append(Paragraph(footer_text, self.styles['Normal']))
        
        # Build PDF
        doc.build(story)
        
        # Get PDF data
        buffer.seek(0)
        pdf_data = buffer.getvalue()
        buffer.close()
        
        return pdf_data
    
    def save_report_to_blob(self, pdf_data, filename):
        """Save PDF report to blob storage"""
        try:
            blob_client = self.blob_client.get_blob_client(
                container="reports",
                blob=filename
            )
            
            blob_client.upload_blob(pdf_data, overwrite=True)
            
            return blob_client.url
            
        except Exception as e:
            print(f"‚ùå Error saving report to blob: {e}")
            raise
    
    def generate_analytics_report(self, analytics_data, tenant_id):
        """Generate PDF analytics report"""
        buffer = io.BytesIO()
        doc = SimpleDocTemplate(buffer, pagesize=A4)
        
        story = []
        
        # Title
        title = f"Analytics Report - Tenant {tenant_id}"
        story.append(Paragraph(title, self.title_style))
        story.append(Spacer(1, 12))
        
        # Summary stats
        dashboard = analytics_data.get('dashboard', {})
        
        stats_data = [
            ['Metric', 'Value'],
            ['Templates Created', str(dashboard.get('templates_created', 0))],
            ['Templates Approved', str(dashboard.get('templates_approved', 0))],
            ['Files Processed', str(dashboard.get('files_processed', 0))],
            ['API Calls', str(dashboard.get('api_calls', 0))],
            ['Error Rate', f"{dashboard.get('error_rate', 0):.2f}%"]
        ]
        
        stats_table = Table(stats_data, colWidths=[3*inch, 2*inch])
        stats_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.darkgreen),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTNAME', (0, 1), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 10),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.lightgreen),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        
        story.append(stats_table)
        
        # Build PDF
        doc.build(story)
        
        buffer.seek(0)
        pdf_data = buffer.getvalue()
        buffer.close()
        
        return pdf_data

# Global instance
pdf_generator = PDFReportGenerator()