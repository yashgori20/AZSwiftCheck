name: Deploy Swift Check AI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: swiftcheckacr.azurecr.io
  IMAGE_NAME: swiftcheck-api
  CONTAINER_APP_NAME: swiftcheck-api
  RESOURCE_GROUP: SwiftCheckAi
  ACR_NAME: swiftcheckacr
  IMAGES_TO_KEEP: 2

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.SWIFTCHECKAPI_REGISTRY_USERNAME }}
        password: ${{ secrets.SWIFTCHECKAPI_REGISTRY_PASSWORD }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.azure
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.SWIFTCHECKAPI_AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.SWIFTCHECKAPI_AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.SWIFTCHECKAPI_AZURE_SUBSCRIPTION_ID }}
    
    - name: Update Azure Container App
      run: |
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Notify deployment complete
      run: |
        echo "‚úÖ Deployment successful!"
        echo "üöÄ Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "üì± URL: https://swiftcheck-api.agreeabletree-bb0198f9.uaenorth.azurecontainerapps.io"

  # Cleanup job that runs after successful deployment
  cleanup-acr:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: success()  # Only run if deployment was successful
    permissions:
      id-token: write  # Required for Azure OIDC authentication
    
    steps:
    # FIXED: Proper Azure authentication for ACR operations
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id: ${{ secrets.SWIFTCHECKAPI_AZURE_CLIENT_ID }}
        tenant-id: ${{ secrets.SWIFTCHECKAPI_AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.SWIFTCHECKAPI_AZURE_SUBSCRIPTION_ID }}

    # FIXED: Verify Azure authentication and subscription
    - name: Verify Azure connection
      run: |
        echo "üîç Verifying Azure authentication..."
        az account show
        echo "üìã Available subscriptions:"
        az account list --output table
        echo "üîê Current subscription:"
        az account show --query '{name:name, id:id, state:state}' --output table

    # FIXED: Use Docker login with registry credentials for ACR operations
    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.SWIFTCHECKAPI_REGISTRY_USERNAME }}
        password: ${{ secrets.SWIFTCHECKAPI_REGISTRY_PASSWORD }}

    # FIXED: Alternative ACR login method using service principal
    - name: Login to ACR using Azure CLI
      run: |
        echo "üîê Logging into ACR using service principal..."
        az acr login --name ${{ env.ACR_NAME }}

    - name: Get current image tags
      id: get-tags
      run: |
        echo "üîç Getting tags for ${{ env.IMAGE_NAME }}..."
        
        # FIXED: Add error handling and alternative methods
        if ! tags=$(az acr repository show-tags --name ${{ env.ACR_NAME }} --repository ${{ env.IMAGE_NAME }} --orderby time_desc --output json 2>/dev/null); then
          echo "‚ùå Failed to get tags using az acr repository show-tags"
          echo "üîÑ Trying alternative method..."
          
          # Alternative: Use REST API through az rest
          if ! tags=$(az rest --method GET --url "https://${{ env.REGISTRY }}/v2/${{ env.IMAGE_NAME }}/tags/list" --query 'tags' --output json 2>/dev/null); then
            echo "‚ùå Alternative method also failed"
            echo "‚ö†Ô∏è Setting empty tags array"
            tags="[]"
          fi
        fi
        
        echo "tags=$tags" >> $GITHUB_OUTPUT
        tag_count=$(echo "$tags" | jq length)
        echo "üìä Found $tag_count total tags"
        
        # Debug: Show the tags
        echo "üè∑Ô∏è Current tags:"
        echo "$tags" | jq -r '.[]' || echo "No tags found"

    - name: Clean up old image tags
      run: |
        tags='${{ steps.get-tags.outputs.tags }}'
        tag_count=$(echo "$tags" | jq length)
        
        if [ "$tag_count" -gt ${{ env.IMAGES_TO_KEEP }} ]; then
          echo "üßπ Found $tag_count tags, keeping ${{ env.IMAGES_TO_KEEP }}, deleting $((tag_count - ${{ env.IMAGES_TO_KEEP }}))"
          
          # Get tags to delete (skip the first N to keep)
          tags_to_delete=$(echo "$tags" | jq -r '.[${{ env.IMAGES_TO_KEEP }}:][]')
          
          for tag in $tags_to_delete; do
            if [ -n "$tag" ] && [ "$tag" != "null" ]; then
              echo "üóëÔ∏è Deleting image tag: $tag"
              # FIXED: Add error handling for delete operations
              if ! az acr repository delete --name ${{ env.ACR_NAME }} --image "${{ env.IMAGE_NAME }}:$tag" --yes; then
                echo "‚ö†Ô∏è Failed to delete tag: $tag (may not exist)"
              fi
            fi
          done
          
          echo "‚úÖ Completed tag cleanup process"
        else
          echo "‚ÑπÔ∏è Only $tag_count tags found, no cleanup needed"
        fi

    - name: Clean up untagged images
      run: |
        echo "üßπ Cleaning up untagged/dangling images..."
        
        # FIXED: Add error handling for untagged image cleanup
        if untagged_manifests=$(az acr repository show-manifests --name ${{ env.ACR_NAME }} --repository ${{ env.IMAGE_NAME }} --query "[?tags[0]==null].digest" -o tsv 2>/dev/null); then
          if [ -n "$untagged_manifests" ]; then
            echo "$untagged_manifests" | while read -r digest; do
              if [ -n "$digest" ]; then
                echo "üóëÔ∏è Deleting untagged manifest: $digest"
                az acr repository delete --name ${{ env.ACR_NAME }} --image "${{ env.IMAGE_NAME }}@$digest" --yes || echo "‚ö†Ô∏è Failed to delete manifest: $digest"
              fi
            done
            echo "‚úÖ Cleaned up untagged images"
          else
            echo "‚ÑπÔ∏è No untagged images found"
          fi
        else
          echo "‚ö†Ô∏è Could not retrieve manifest information"
        fi

    - name: Clean up old Container App revisions
      run: |
        echo "üßπ Cleaning up old Container App revisions..."
        
        # FIXED: Add error handling for revision cleanup
        if revisions=$(az containerapp revision list --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query '[].name' -o json 2>/dev/null); then
          revision_count=$(echo "$revisions" | jq length)
          
          if [ "$revision_count" -gt ${{ env.IMAGES_TO_KEEP }} ]; then
            echo "üìä Found $revision_count revisions, keeping ${{ env.IMAGES_TO_KEEP }}, deactivating $((revision_count - ${{ env.IMAGES_TO_KEEP }}))"
            
            # Get revisions to deactivate (skip the first N to keep)
            revisions_to_deactivate=$(echo "$revisions" | jq -r '.[${{ env.IMAGES_TO_KEEP }}:][]')
            
            for revision in $revisions_to_deactivate; do
              if [ -n "$revision" ] && [ "$revision" != "null" ]; then
                echo "üóëÔ∏è Deactivating revision: $revision"
                az containerapp revision deactivate --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --revision "$revision" || echo "‚ö†Ô∏è Failed to deactivate revision: $revision"
              fi
            done
            
            echo "‚úÖ Completed revision cleanup process"
          else
            echo "‚ÑπÔ∏è Only $revision_count revisions found, no cleanup needed"
          fi
        else
          echo "‚ö†Ô∏è Could not retrieve revision information"
        fi

    - name: Show final cleanup summary
      run: |
        echo "üìä === CLEANUP SUMMARY ==="
        
        # FIXED: Add error handling for summary commands
        echo "üè∑Ô∏è Container Registry Info:"
        az acr show --name ${{ env.ACR_NAME }} --query '{name:name, loginServer:loginServer, sku:sku.name}' -o table || echo "‚ö†Ô∏è Could not retrieve ACR info"
        
        echo ""
        echo "üìã Remaining image tags:"
        az acr repository show-tags --name ${{ env.ACR_NAME }} --repository ${{ env.IMAGE_NAME }} --orderby time_desc || echo "‚ö†Ô∏è Could not retrieve tags"
        
        echo ""
        echo "üîÑ Active Container App revisions:"
        az containerapp revision list --name ${{ env.CONTAINER_APP_NAME }} --resource-group ${{ env.RESOURCE_GROUP }} --query '[].{Name:name,CreatedTime:properties.createdTime,Active:properties.active}' -o table || echo "‚ö†Ô∏è Could not retrieve revision info"
        
        echo ""
        echo "üíæ Storage cleanup complete! üéâ"