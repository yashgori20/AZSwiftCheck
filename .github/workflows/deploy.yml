name: Deploy Swift Check AI

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: swiftcheckacr.azurecr.io
  IMAGE_NAME: swiftcheck-api
  CONTAINER_APP_NAME: swiftcheck-api
  RESOURCE_GROUP: SwiftCheckAi
  ACR_NAME: swiftcheckacr
  IMAGES_TO_KEEP: 2

jobs:
  # ──────────────────────────────────────────────────────────────────────────
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      id-token: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Azure Container Registry
      uses: azure/docker-login@v1
      with:
        login-server: ${{ env.REGISTRY }}
        username: ${{ secrets.SWIFTCHECKAPI_REGISTRY_USERNAME }}
        password: ${{ secrets.SWIFTCHECKAPI_REGISTRY_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.azure
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id:       ${{ secrets.SWIFTCHECKAPI_AZURE_CLIENT_ID }}
        tenant-id:       ${{ secrets.SWIFTCHECKAPI_AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.SWIFTCHECKAPI_AZURE_SUBSCRIPTION_ID }}

    - name: Update Azure Container App
      shell: bash
      run: |
        az containerapp update \
          --name ${{ env.CONTAINER_APP_NAME }} \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Notify deployment complete
      run: |
        echo "✅ Deployment successful!"
        echo "🚀 Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
        echo "🌐 URL:  https://swiftcheck-api.agreeabletree-bb0198f9.uaenorth.azurecontainerapps.io"

  # ──────────────────────────────────────────────────────────────────────────
  cleanup-acr:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: success()
    permissions:
      id-token: write

    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        client-id:       ${{ secrets.SWIFTCHECKAPI_AZURE_CLIENT_ID }}
        tenant-id:       ${{ secrets.SWIFTCHECKAPI_AZURE_TENANT_ID }}
        subscription-id: ${{ secrets.SWIFTCHECKAPI_AZURE_SUBSCRIPTION_ID }}

    # ── Get tags (compact JSON) ────────────────────────────────────────────
    - name: Get current image tags
      id: get-tags
      shell: bash
      run: |
        echo "🔍 Fetching tags for ${{ env.IMAGE_NAME }} ..."
        tags=$(az acr repository show-tags \
                 --name ${{ env.ACR_NAME }} \
                 --repository ${{ env.IMAGE_NAME }} \
                 --orderby time_desc \
                 --output json | jq -c 'sort | reverse')
        echo "tags=$tags" >> "$GITHUB_OUTPUT"
        echo "📊 Found $(jq length <<<"$tags") tags"

    # ── Delete older tags ──────────────────────────────────────────────────
    - name: Clean up old image tags
      shell: bash
      env:
        TAGS: "${{ steps.get-tags.outputs.tags }}"
      run: |
        keep=${{ env.IMAGES_TO_KEEP }}
        total=$(jq length <<<"$TAGS")
        echo "🧹 Keeping ${keep} of ${total} tags"

        if (( total > keep )); then
          delete_list=$(jq -r ".[$keep:][]" <<<"$TAGS")
          for tag in $delete_list; do
            echo "🗑️ Deleting ${tag}"
            az acr repository delete \
              --name ${{ env.ACR_NAME }} \
              --image "${{ env.IMAGE_NAME }}:${tag}" \
              --yes
          done
        else
          echo "ℹ️ Nothing to delete"
        fi

    # ── Remove untagged digests ────────────────────────────────────────────
    - name: Clean up untagged images
      shell: bash
      run: |
        echo "🧹 Removing untagged manifests ..."
        az acr repository show-manifests \
          --name ${{ env.ACR_NAME }} \
          --repository ${{ env.IMAGE_NAME }} \
          --query "[?tags[0]==null].digest" -o tsv | while read -r digest; do
            [ -z "$digest" ] && continue
            echo "🗑️  Deleting digest $digest"
            az acr repository delete \
              --name ${{ env.ACR_NAME }} \
              --image "${{ env.IMAGE_NAME }}@${digest}" \
              --yes
          done

    # ── Prune old Container App revisions ─────────────────────────────────
    - name: Clean up old Container App revisions
      shell: bash
      run: |
        keep=${{ env.IMAGES_TO_KEEP }}
        revisions=$(az containerapp revision list \
                      --name ${{ env.CONTAINER_APP_NAME }} \
                      --resource-group ${{ env.RESOURCE_GROUP }} \
                      --query "sort_by([].{name:name,created:properties.createdTime}, &created)[].name" \
                      -o tsv)
        count=$(echo "$revisions" | wc -l)
        echo "🧹 Keeping ${keep} of ${count} revisions"

        if (( count > keep )); then
          echo "$revisions" | head -n -"$keep" | while read -r rev; do
            echo "🗑️  Deactivating revision $rev"
            az containerapp revision deactivate \
              --name ${{ env.CONTAINER_APP_NAME }} \
              --resource-group ${{ env.RESOURCE_GROUP }} \
              --revision "$rev"
          done
        fi
